{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Marapalli_Anuhya.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "5iZfKrcAgrkR"
      },
      "source": [
        "In [ ]:from keras.datasets import mnist\n",
        "               \n",
        "       data = mnist.load_data()\n",
        "       Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n",
        "      11493376/11490434 [==============================] - 0s 0us/step\n",
        "\n",
        "In [ ]:((X_train, y_train), (X_test, y_test)) = data\n",
        "\n",
        "In [ ]:X_train = X_train.reshape((X_train.shape[0], 28*28)).astype('float32')\n",
        "       X_test = X_test.reshape((X_test.shape[0], 28*28)).astype('float32')\n",
        "\n",
        "In [ ]:X_train = X_train / 255\n",
        "       X_test = X_test / 255\n",
        "\n",
        "In [ ]:from keras.utils import np_utils\n",
        "\n",
        "       print(y_test.shape)\n",
        "\n",
        "       y_train = np_utils.to_categorical(y_train)\n",
        "       y_test = np_utils.to_categorical(y_test)\n",
        "\n",
        "       num_classes = y_test.shape[1]\n",
        "       print(y_test.shape)\n",
        "\n",
        "       (10000,)\n",
        "       (10000, 10)\n",
        "\n",
        "In [ ]:from keras.models import Sequential\n",
        "       from keras.layers import Dense\n",
        "\n",
        "In [ ]:model = Sequential()\n",
        "       model.add(Dense(32, input_dim = 28*28, activation='relu'))\n",
        "       model.add(Dense(64, activation='relu'))\n",
        "       model.add(Dense(10, activation='softmax'))\n",
        "\n",
        "In [ ]:model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
        "\n",
        "In [ ]:model.summary()\n",
        "\n",
        "       Model: \"sequential\"\n",
        "       Layer (type)                 Output Shape              Param #   \n",
        "       =================================================================\n",
        "       dense (Dense)                (None, 32)                25120     \n",
        "      _________________________________________________________________\n",
        "       dense_1 (Dense)              (None, 64)                2112      \n",
        "      _________________________________________________________________\n",
        "       dense_2 (Dense)              (None, 10)                650       \n",
        "      =================================================================\n",
        "      Total params: 27,882\n",
        "      Trainable params: 27,882\n",
        "      Non-trainable params: 0\n",
        "      _________________________________________________________________\n",
        " \n",
        "\n",
        "In [ ]:model.fit(X_train, y_train, epochs=10, batch_size=100)\n",
        "\n",
        "       Epoch 1/10\n",
        "       600/600 [==============================] - 2s 2ms/step - loss: 0.7778 - accuracy: 0.7717\n",
        "       Epoch 2/10\n",
        "       600/600 [==============================] - 1s 2ms/step - loss: 0.2136 - accuracy: 0.9376\n",
        "       Epoch 3/10\n",
        "       600/600 [==============================] - 1s 2ms/step - loss: 0.1612 - accuracy: 0.9527\n",
        "       Epoch 4/10\n",
        "       600/600 [==============================] - 1s 2ms/step - loss: 0.1308 - accuracy: 0.9620\n",
        "       Epoch 5/10\n",
        "       600/600 [==============================] - 1s 2ms/step - loss: 0.1125 - accuracy: 0.9659\n",
        "       Epoch 6/10\n",
        "       600/600 [==============================] - 1s 2ms/step - loss: 0.0997 - accuracy: 0.9697\n",
        "       Epoch 7/10\n",
        "       600/600 [==============================] - 1s 2ms/step - loss: 0.0874 - accuracy: 0.9735\n",
        "       Epoch 8/10\n",
        "       600/600 [==============================] - 1s 2ms/step - loss: 0.0822 - accuracy: 0.9749\n",
        "       Epoch 9/10\n",
        "       600/600 [==============================] - 1s 2ms/step - loss: 0.0731 - accuracy: 0.9775\n",
        "       Epoch 10/10\n",
        "       600/600 [==============================] - 1s 2ms/step - loss: 0.0701 - accuracy: 0.9788\n",
        "       Out[ ]:\n",
        "       <tensorflow.python.keras.callbacks.History at 0x7fd8ea124210>\n",
        "\n",
        "In [ ]:scores = model.evaluate(X_test, y_test)\n",
        "       print(scores)\n",
        "\n",
        "       313/313 [==============================] - 0s 938us/step - loss: 0.1038 - accuracy: 0.9717\n",
        "       [0.10381794720888138, 0.9717000126838684]"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}